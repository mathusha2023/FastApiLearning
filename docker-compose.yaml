name: "FastAPI"

services:

  minio:
    container_name: minio
    image: minio/minio
    entrypoint: sh
    command: >
      -c 'mkdir -p /data/bucket
      && minio server /data'
    ports:
      - "9000:9000"
      - "9001:9001"
    expose:
      - 9000
    environment:
      MINIO_ROOT_USER: user
      MINIO_ROOT_PASSWORD: 123456789
      MINIO_ADDRESS: ":9000"
      MINIO_CONSOLE_ADDRESS: ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: [ "CMD", "sh", "-c", "mc alias set myminio http://localhost:9000 user 123456789 && mc ls myminio" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  minio-setup:
    container_name: minio-setup
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      sh -c "
      mc alias set myminio http://minio:9000 user 123456789 &&
      mc mb myminio/bucket --ignore-existing &&
      mc anonymous set download myminio/bucket &&
      echo 'MinIO setup completed'
      "
    networks:
      - backend

  database:
    container_name: database
    image: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: user
      POSTGRES_DB: db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  adminer:
    container_name: adminer
    image: adminer
    restart: unless-stopped
    ports:
      - "8081:8080"
    depends_on:
      - database
    networks:
      - backend

  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: rabbitmq
    hostname: rabbitmq
    ports:
      - "5672:5672"   # AMQP protocol port
      - "15672:15672" # Management UI port
    expose:
      - 5672
      - 15672
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - backend

  api:
    container_name: api
    build: .
    restart: unless-stopped
    ports:
      - "8000:8000"
    expose:
      - 8000
    depends_on:
      - database
      - minio
      - rabbitmq
    networks:
      - backend

volumes:
  minio_data:
    driver: local
  postgres_data:
    driver: local
  rabbitmq_data:
    driver: local

networks:
  backend: